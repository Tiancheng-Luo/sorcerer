h1. Sorcerer -- Recovering the Source

p. Sorcerer will generate Ruby code from a Ripper-like abstract syntax
tree (i.e. S-Expressions).

p. Sorcerer is targetted mainly at small snippets of Ruby code,
expressable in a single line.  Longer examples may be re-sourced, but
they will be rendered in a single line format.

h2. Limitations

Sorcerer is only testing on Ruby 1.9.

bq. <em>Technically, Sorcerer should work on Ruby 1.8, but since Ripper is
1.9 I've only tried it on that platform.</em>

h2. Links

Documents::       "http://github.com/jimweirich/sorcerer":http://github.com/jimweirich/sorcerer
Git Clone::       git://github.com/jimweirich/sorcerer.git
Issue Tracking::  "http://www.pivotaltracker.com/projects/56858":http://www.pivotaltracker.com/projects/56858
Bug Reporting::   "http://onestepback.org/cgi-bin/bugs.cgi?project=sorcerer":http://onestepback.org/cgi-bin/bugs.cgi?project=sorcerer

h2. Examples

<pre style="background: LightGray">
  sexp = [:binary, 
           [:var_ref, [:@ident, "a", [1, 0]]],
           :+,
           [:var_ref, [:@ident, "b", [1, 4]]]]
  puts Sorcerer.source(sexp)
</pre>

will generate

<pre style="background: LightGray">
  a + b
</pre>

Ripper may be used to produce the s-expressions used by Sorcerer.  The following will produce the same output.

<pre style="background: LightGrey">
  sexp = Ripper::SexpBuilder.new("a + b").parse
  puts Sorcerer.source(sexp)
</pre>

h2. Options

h3. Multi-Line Output

If you want multi-line output of source, add the multiline option to
the source command. 

For example, given:

<pre style="background: LightGrey">
  sexp = Ripper::SexpBuilder.new("def foo; end").parse
</pre>

Then the following

<pre style="background: LightGrey">
  puts Sorcerer.source(sexp)
</pre>

generates single line output (the default):

<pre style="background: LightBlue">
def foo; end
</pre>

And the following

<pre style="background: LightGrey">
  puts Sorcerer.source(sexp, multiline: true)
</pre>

generates multi-line output

<pre style="background: LightBlue">
def foo
end
</pre>

h3. Debugging Output

If you wish to see the S-Expressions processed by Sorcerer and the
output emitted, then use the debug option:

<pre style="background: LightGrey">
  puts Sorcerer.source(sexp, debug: true)
</pre>

